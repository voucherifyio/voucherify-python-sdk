# coding: utf-8

"""
    Voucherify API

    Voucherify promotion engine REST API. Please see https://docs.voucherify.io/docs for more details.

    The version of the OpenAPI document: v2018-08-01
    Contact: support@voucherify.io
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict
from typing import Any, ClassVar, Dict, List, Optional
from voucherify.models.access_settings_assign import AccessSettingsAssign
from voucherify.models.access_settings_unassign import AccessSettingsUnassign
from typing import Optional, Set
from typing_extensions import Self

class AccessSettings(BaseModel):
    """
    Assigns or unassigns an area or store to the campaign.  **NOTE**: this object can be sent if the Areas and Stores enterprise feature is enabled. Contact [Voucherify Sales](https://www.voucherify.io/contact-sales) to learn more.
    """ # noqa: E501
    assign: Optional[AccessSettingsAssign] = None
    unassign: Optional[AccessSettingsUnassign] = None
    __properties: ClassVar[List[str]] = ["assign", "unassign"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of AccessSettings from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of assign
        if self.assign:
            _dict['assign'] = self.assign.to_dict()
        # override the default output from pydantic by calling `to_dict()` of unassign
        if self.unassign:
            _dict['unassign'] = self.unassign.to_dict()
        # set to None if assign (nullable) is None
        # and model_fields_set contains the field
        if self.assign is None and "assign" in self.model_fields_set:
            _dict['assign'] = None

        # set to None if unassign (nullable) is None
        # and model_fields_set contains the field
        if self.unassign is None and "unassign" in self.model_fields_set:
            _dict['unassign'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of AccessSettings from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "assign": AccessSettingsAssign.from_dict(obj["assign"]) if obj.get("assign") is not None else None,
            "unassign": AccessSettingsUnassign.from_dict(obj["unassign"]) if obj.get("unassign") is not None else None
        })
        return _obj


