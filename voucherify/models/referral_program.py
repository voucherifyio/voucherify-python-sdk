# coding: utf-8

"""
    Voucherify API

    Voucherify promotion engine REST API. Please see https://docs.voucherify.io/docs for more details.

    The version of the OpenAPI document: v2018-08-01
    Contact: support@voucherify.io
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from voucherify.models.referral_program_custom_event import ReferralProgramCustomEvent
from voucherify.models.referral_program_referee_reward import ReferralProgramRefereeReward
from typing import Optional, Set
from typing_extensions import Self

class ReferralProgram(BaseModel):
    """
    Defines the referee reward and the way a referral is triggered. Context: `REFERRAL_PROGRAM`.
    """ # noqa: E501
    conversion_event_type: Optional[StrictStr] = Field(default=None, description="Define how a referral is triggered.")
    custom_event: Optional[ReferralProgramCustomEvent] = None
    referee_reward: Optional[ReferralProgramRefereeReward] = None
    __properties: ClassVar[List[str]] = ["conversion_event_type", "custom_event", "referee_reward"]

    @field_validator('conversion_event_type')
    def conversion_event_type_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['redemption', 'custom_event']):
            raise ValueError("must be one of enum values ('redemption', 'custom_event')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ReferralProgram from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of custom_event
        if self.custom_event:
            _dict['custom_event'] = self.custom_event.to_dict()
        # override the default output from pydantic by calling `to_dict()` of referee_reward
        if self.referee_reward:
            _dict['referee_reward'] = self.referee_reward.to_dict()
        # set to None if conversion_event_type (nullable) is None
        # and model_fields_set contains the field
        if self.conversion_event_type is None and "conversion_event_type" in self.model_fields_set:
            _dict['conversion_event_type'] = None

        # set to None if custom_event (nullable) is None
        # and model_fields_set contains the field
        if self.custom_event is None and "custom_event" in self.model_fields_set:
            _dict['custom_event'] = None

        # set to None if referee_reward (nullable) is None
        # and model_fields_set contains the field
        if self.referee_reward is None and "referee_reward" in self.model_fields_set:
            _dict['referee_reward'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ReferralProgram from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "conversion_event_type": obj.get("conversion_event_type"),
            "custom_event": ReferralProgramCustomEvent.from_dict(obj["custom_event"]) if obj.get("custom_event") is not None else None,
            "referee_reward": ReferralProgramRefereeReward.from_dict(obj["referee_reward"]) if obj.get("referee_reward") is not None else None
        })
        return _obj


