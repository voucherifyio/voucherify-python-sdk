# coding: utf-8

"""
    Voucherify API

    Voucherify promotion engine REST API. Please see https://docs.voucherify.io/docs for more details.

    The version of the OpenAPI document: v2018-08-01
    Contact: support@voucherify.io
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from voucherify.models.loyalty_points_bucket_bucket import LoyaltyPointsBucketBucket
from typing import Optional, Set
from typing_extensions import Self

class LoyaltyPointsBucket(BaseModel):
    """
    Contains the details about expiring loyalty points.
    """ # noqa: E501
    id: Optional[StrictStr] = Field(default=None, description="Unique identifier of the loyalty points bucket.")
    voucher_id: Optional[StrictStr] = Field(default=None, description="Unique identifier of the parent loyalty card.")
    campaign_id: Optional[StrictStr] = Field(default=None, description="Unique identifier of the parent campaign.")
    bucket: Optional[LoyaltyPointsBucketBucket] = None
    status: Optional[StrictStr] = Field(default=None, description="Loyalty point point bucket status.")
    expires_at: Optional[datetime] = Field(default=None, description="Date when the number of points defined in the bucket object are due to expire.")
    created_at: Optional[datetime] = Field(default=None, description="Timestamp representing the date and time when the loyalty point bucket object was created in ISO 8601 format.")
    updated_at: Optional[datetime] = Field(default=None, description="Timestamp representing the date and time when the loyalty point bucket object was updated in ISO 8601 format.")
    object: Optional[StrictStr] = Field(default='loyalty_points_bucket', description="The type of the object represented by JSON. This object stores information about the loyalty point bucket.")
    __properties: ClassVar[List[str]] = ["id", "voucher_id", "campaign_id", "bucket", "status", "expires_at", "created_at", "updated_at", "object"]

    @field_validator('object')
    def object_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['loyalty_points_bucket']):
            raise ValueError("must be one of enum values ('loyalty_points_bucket')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of LoyaltyPointsBucket from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of bucket
        if self.bucket:
            _dict['bucket'] = self.bucket.to_dict()
        # set to None if id (nullable) is None
        # and model_fields_set contains the field
        if self.id is None and "id" in self.model_fields_set:
            _dict['id'] = None

        # set to None if voucher_id (nullable) is None
        # and model_fields_set contains the field
        if self.voucher_id is None and "voucher_id" in self.model_fields_set:
            _dict['voucher_id'] = None

        # set to None if campaign_id (nullable) is None
        # and model_fields_set contains the field
        if self.campaign_id is None and "campaign_id" in self.model_fields_set:
            _dict['campaign_id'] = None

        # set to None if bucket (nullable) is None
        # and model_fields_set contains the field
        if self.bucket is None and "bucket" in self.model_fields_set:
            _dict['bucket'] = None

        # set to None if status (nullable) is None
        # and model_fields_set contains the field
        if self.status is None and "status" in self.model_fields_set:
            _dict['status'] = None

        # set to None if expires_at (nullable) is None
        # and model_fields_set contains the field
        if self.expires_at is None and "expires_at" in self.model_fields_set:
            _dict['expires_at'] = None

        # set to None if created_at (nullable) is None
        # and model_fields_set contains the field
        if self.created_at is None and "created_at" in self.model_fields_set:
            _dict['created_at'] = None

        # set to None if updated_at (nullable) is None
        # and model_fields_set contains the field
        if self.updated_at is None and "updated_at" in self.model_fields_set:
            _dict['updated_at'] = None

        # set to None if object (nullable) is None
        # and model_fields_set contains the field
        if self.object is None and "object" in self.model_fields_set:
            _dict['object'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of LoyaltyPointsBucket from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "id": obj.get("id"),
            "voucher_id": obj.get("voucher_id"),
            "campaign_id": obj.get("campaign_id"),
            "bucket": LoyaltyPointsBucketBucket.from_dict(obj["bucket"]) if obj.get("bucket") is not None else None,
            "status": obj.get("status"),
            "expires_at": obj.get("expires_at"),
            "created_at": obj.get("created_at"),
            "updated_at": obj.get("updated_at"),
            "object": obj.get("object") if obj.get("object") is not None else 'loyalty_points_bucket'
        })
        return _obj


