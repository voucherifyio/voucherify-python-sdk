# coding: utf-8

"""
    Voucherify API

    Voucherify promotion engine REST API. Please see https://docs.voucherify.io/docs for more details.

    The version of the OpenAPI document: v2018-08-01
    Contact: support@voucherify.io
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictInt
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class CustomersPermanentDeletionCreateResponseBodyDataJson(BaseModel):
    """
    Statistics summarizing the number of related information that was deleted.
    """ # noqa: E501
    events: Optional[StrictInt] = Field(default=None, description="Number of events deleted.")
    customer_events: Optional[StrictInt] = Field(default=None, description="Number of customer events deleted.")
    daily_events: Optional[StrictInt] = Field(default=None, description="Number of daily events deleted.")
    segments: Optional[StrictInt] = Field(default=None, description="Number of segments deleted.")
    orders: Optional[StrictInt] = Field(default=None, description="Number of orders deleted.")
    order_events: Optional[StrictInt] = Field(default=None, description="Number of order events deleted.")
    customer: Optional[StrictInt] = Field(default=1, description="Number of customers deleted.")
    __properties: ClassVar[List[str]] = ["events", "customer_events", "daily_events", "segments", "orders", "order_events", "customer"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of CustomersPermanentDeletionCreateResponseBodyDataJson from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # set to None if events (nullable) is None
        # and model_fields_set contains the field
        if self.events is None and "events" in self.model_fields_set:
            _dict['events'] = None

        # set to None if customer_events (nullable) is None
        # and model_fields_set contains the field
        if self.customer_events is None and "customer_events" in self.model_fields_set:
            _dict['customer_events'] = None

        # set to None if daily_events (nullable) is None
        # and model_fields_set contains the field
        if self.daily_events is None and "daily_events" in self.model_fields_set:
            _dict['daily_events'] = None

        # set to None if segments (nullable) is None
        # and model_fields_set contains the field
        if self.segments is None and "segments" in self.model_fields_set:
            _dict['segments'] = None

        # set to None if orders (nullable) is None
        # and model_fields_set contains the field
        if self.orders is None and "orders" in self.model_fields_set:
            _dict['orders'] = None

        # set to None if order_events (nullable) is None
        # and model_fields_set contains the field
        if self.order_events is None and "order_events" in self.model_fields_set:
            _dict['order_events'] = None

        # set to None if customer (nullable) is None
        # and model_fields_set contains the field
        if self.customer is None and "customer" in self.model_fields_set:
            _dict['customer'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of CustomersPermanentDeletionCreateResponseBodyDataJson from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "events": obj.get("events"),
            "customer_events": obj.get("customer_events"),
            "daily_events": obj.get("daily_events"),
            "segments": obj.get("segments"),
            "orders": obj.get("orders"),
            "order_events": obj.get("order_events"),
            "customer": obj.get("customer") if obj.get("customer") is not None else 1
        })
        return _obj


