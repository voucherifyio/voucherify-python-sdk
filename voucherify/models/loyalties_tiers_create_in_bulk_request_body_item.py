# coding: utf-8

"""
    Voucherify API

    Voucherify promotion engine REST API. Please see https://docs.voucherify.io/docs for more details.

    The version of the OpenAPI document: v2018-08-01
    Contact: support@voucherify.io
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from voucherify.models.loyalty_tier_base_points import LoyaltyTierBasePoints
from typing import Optional, Set
from typing_extensions import Self

class LoyaltiesTiersCreateInBulkRequestBodyItem(BaseModel):
    """
    LoyaltiesTiersCreateInBulkRequestBodyItem
    """ # noqa: E501
    name: Optional[StrictStr] = Field(default=None, description="Loyalty Tier name.")
    earning_rules: Optional[Dict[str, Any]] = Field(default=None, description="Contains a list of earning rule IDs and their points mapping for the given earning rule.")
    rewards: Optional[Dict[str, Any]] = Field(default=None, description="Contains a list of reward IDs and their points mapping for the given reward.")
    points: Optional[LoyaltyTierBasePoints] = None
    metadata: Optional[Dict[str, Any]] = Field(default=None, description="The metadata object stores all custom attributes assigned to the loyalty tier. A set of key/value pairs that you can attach to a loyalty tier object. It can be useful for storing additional information about the loyalty tier in a structured format.")
    __properties: ClassVar[List[str]] = ["name", "earning_rules", "rewards", "points", "metadata"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of LoyaltiesTiersCreateInBulkRequestBodyItem from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of points
        if self.points:
            _dict['points'] = self.points.to_dict()
        # set to None if name (nullable) is None
        # and model_fields_set contains the field
        if self.name is None and "name" in self.model_fields_set:
            _dict['name'] = None

        # set to None if earning_rules (nullable) is None
        # and model_fields_set contains the field
        if self.earning_rules is None and "earning_rules" in self.model_fields_set:
            _dict['earning_rules'] = None

        # set to None if rewards (nullable) is None
        # and model_fields_set contains the field
        if self.rewards is None and "rewards" in self.model_fields_set:
            _dict['rewards'] = None

        # set to None if points (nullable) is None
        # and model_fields_set contains the field
        if self.points is None and "points" in self.model_fields_set:
            _dict['points'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of LoyaltiesTiersCreateInBulkRequestBodyItem from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "name": obj.get("name"),
            "earning_rules": obj.get("earning_rules"),
            "rewards": obj.get("rewards"),
            "points": LoyaltyTierBasePoints.from_dict(obj["points"]) if obj.get("points") is not None else None,
            "metadata": obj.get("metadata")
        })
        return _obj


