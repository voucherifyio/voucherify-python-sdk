# coding: utf-8

"""
    Voucherify API

    Voucherify promotion engine REST API. Please see https://docs.voucherify.io/docs for more details.

    The version of the OpenAPI document: v2018-08-01
    Contact: support@voucherify.io
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class TrashBinItem(BaseModel):
    """
    Resource moved to the bin, i.e. a campaign, product, SKU, or voucher.
    """ # noqa: E501
    id: Optional[StrictStr] = Field(default=None, description="Unique identifier of the trash bin entry. It should not be confused with the ID of the resource moved to the bin.")
    created_at: Optional[datetime] = Field(default=None, description="Timestamp representing the date and time when the resource was moved to the bin. The value for this parameter is shown in the ISO 8601 format.")
    deleted_by_user_id: Optional[StrictStr] = Field(default=None, description="Unique identifier of the user who moved the resource to the bin. It returns a user ID if the resource was moved to the bin through an action in the website. It returns a `null` if the resource was deleted through the API.")
    resource_id: Optional[StrictStr] = Field(default=None, description="Unique identifier of the resource moved to the bin, i.e. an ID of a campaign, product, SKU, or voucher.")
    resource_type: Optional[StrictStr] = Field(default=None, description="Type of the resource moved to the bin.")
    resource_name: Optional[StrictStr] = Field(default=None, description="Name of the resouce moved to the bin. It is the name of the campaign, product or SKU, or the voucher code.")
    resource_parent_id: Optional[StrictStr] = Field(default=None, description="Unique identifier of the parent resource. For a voucher, it is a campaign ID, except for standalone vouchers. For an SKU, it is the product ID. It returns `null` for campaigns and base products.")
    object: Optional[StrictStr] = Field(default=None, description="The type of the object represented by JSON. It is equal to the `resource_type`.")
    __properties: ClassVar[List[str]] = ["id", "created_at", "deleted_by_user_id", "resource_id", "resource_type", "resource_name", "resource_parent_id", "object"]

    @field_validator('resource_type')
    def resource_type_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['campaign', 'product', 'sku', 'voucher']):
            raise ValueError("must be one of enum values ('campaign', 'product', 'sku', 'voucher')")
        return value

    @field_validator('object')
    def object_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['campaign', 'product', 'sku', 'voucher']):
            raise ValueError("must be one of enum values ('campaign', 'product', 'sku', 'voucher')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of TrashBinItem from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # set to None if id (nullable) is None
        # and model_fields_set contains the field
        if self.id is None and "id" in self.model_fields_set:
            _dict['id'] = None

        # set to None if created_at (nullable) is None
        # and model_fields_set contains the field
        if self.created_at is None and "created_at" in self.model_fields_set:
            _dict['created_at'] = None

        # set to None if deleted_by_user_id (nullable) is None
        # and model_fields_set contains the field
        if self.deleted_by_user_id is None and "deleted_by_user_id" in self.model_fields_set:
            _dict['deleted_by_user_id'] = None

        # set to None if resource_id (nullable) is None
        # and model_fields_set contains the field
        if self.resource_id is None and "resource_id" in self.model_fields_set:
            _dict['resource_id'] = None

        # set to None if resource_type (nullable) is None
        # and model_fields_set contains the field
        if self.resource_type is None and "resource_type" in self.model_fields_set:
            _dict['resource_type'] = None

        # set to None if resource_name (nullable) is None
        # and model_fields_set contains the field
        if self.resource_name is None and "resource_name" in self.model_fields_set:
            _dict['resource_name'] = None

        # set to None if resource_parent_id (nullable) is None
        # and model_fields_set contains the field
        if self.resource_parent_id is None and "resource_parent_id" in self.model_fields_set:
            _dict['resource_parent_id'] = None

        # set to None if object (nullable) is None
        # and model_fields_set contains the field
        if self.object is None and "object" in self.model_fields_set:
            _dict['object'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of TrashBinItem from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "id": obj.get("id"),
            "created_at": obj.get("created_at"),
            "deleted_by_user_id": obj.get("deleted_by_user_id"),
            "resource_id": obj.get("resource_id"),
            "resource_type": obj.get("resource_type"),
            "resource_name": obj.get("resource_name"),
            "resource_parent_id": obj.get("resource_parent_id"),
            "object": obj.get("object")
        })
        return _obj


