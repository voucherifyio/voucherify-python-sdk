# coding: utf-8

"""
    Voucherify API

    Voucherify promotion engine REST API. Please see https://docs.voucherify.io/docs for more details.

    The version of the OpenAPI document: v2018-08-01
    Contact: support@voucherify.io
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from voucherify.models.applicable_to_result_list import ApplicableToResultList
from voucherify.models.category import Category
from voucherify.models.inapplicable_to_result_list import InapplicableToResultList
from voucherify.models.order_calculated import OrderCalculated
from voucherify.models.qualifications_redeemable_base import QualificationsRedeemableBase
from voucherify.models.redeemable_result import RedeemableResult
from voucherify.models.validation_rules_assignments_list import ValidationRulesAssignmentsList
from typing import Optional, Set
from typing_extensions import Self

class QualificationsRedeemable(BaseModel):
    """
    QualificationsRedeemable
    """ # noqa: E501
    id: Optional[StrictStr] = Field(default=None, description="Id of the redeemable.")
    object: Optional[StrictStr] = Field(default=None, description="Object type of the redeemable.")
    created_at: Optional[datetime] = Field(default=None, description="Timestamp representing the date and time when the object was created. The value is shown in the ISO 8601 format.")
    result: Optional[RedeemableResult] = None
    order: Optional[OrderCalculated] = None
    validation_rule_id: Optional[StrictStr] = Field(default=None, description="A unique validation rule identifier assigned by the Voucherify API. The validation rule is verified before points are added to the balance.")
    applicable_to: Optional[ApplicableToResultList] = None
    inapplicable_to: Optional[InapplicableToResultList] = None
    metadata: Optional[Dict[str, Any]] = Field(default=None, description="The metadata object stores all custom attributes assigned to the product. A set of key/value pairs that you can attach to a product object. It can be useful for storing additional information about the product in a structured format.")
    categories: Optional[List[Category]] = Field(default=None, description="List of category information.")
    banner: Optional[StrictStr] = Field(default=None, description="Name of the earning rule. This is displayed as a header for the earning rule in the Dashboard.")
    name: Optional[StrictStr] = Field(default=None, description="Name of the redeemable.")
    campaign_name: Optional[StrictStr] = Field(default=None, description="Name of the campaign associated to the redeemable. This field is available only if object is not `campaign`")
    campaign_id: Optional[StrictStr] = Field(default=None, description="Id of the campaign associated to the redeemable. This field is available only if object is not `campaign`")
    validation_rules_assignments: Optional[ValidationRulesAssignmentsList] = None
    redeemables: Optional[List[QualificationsRedeemableBase]] = None
    __properties: ClassVar[List[str]] = ["id", "object", "created_at", "result", "order", "validation_rule_id", "applicable_to", "inapplicable_to", "metadata", "categories", "banner", "name", "campaign_name", "campaign_id", "validation_rules_assignments", "redeemables"]

    @field_validator('object')
    def object_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['campaign', 'promotion_tier', 'promotion_stack', 'voucher']):
            raise ValueError("must be one of enum values ('campaign', 'promotion_tier', 'promotion_stack', 'voucher')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of QualificationsRedeemable from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of result
        if self.result:
            _dict['result'] = self.result.to_dict()
        # override the default output from pydantic by calling `to_dict()` of order
        if self.order:
            _dict['order'] = self.order.to_dict()
        # override the default output from pydantic by calling `to_dict()` of applicable_to
        if self.applicable_to:
            _dict['applicable_to'] = self.applicable_to.to_dict()
        # override the default output from pydantic by calling `to_dict()` of inapplicable_to
        if self.inapplicable_to:
            _dict['inapplicable_to'] = self.inapplicable_to.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in categories (list)
        _items = []
        if self.categories:
            for _item_categories in self.categories:
                if _item_categories:
                    _items.append(_item_categories.to_dict())
            _dict['categories'] = _items
        # override the default output from pydantic by calling `to_dict()` of validation_rules_assignments
        if self.validation_rules_assignments:
            _dict['validation_rules_assignments'] = self.validation_rules_assignments.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in redeemables (list)
        _items = []
        if self.redeemables:
            for _item_redeemables in self.redeemables:
                if _item_redeemables:
                    _items.append(_item_redeemables.to_dict())
            _dict['redeemables'] = _items
        # set to None if id (nullable) is None
        # and model_fields_set contains the field
        if self.id is None and "id" in self.model_fields_set:
            _dict['id'] = None

        # set to None if object (nullable) is None
        # and model_fields_set contains the field
        if self.object is None and "object" in self.model_fields_set:
            _dict['object'] = None

        # set to None if created_at (nullable) is None
        # and model_fields_set contains the field
        if self.created_at is None and "created_at" in self.model_fields_set:
            _dict['created_at'] = None

        # set to None if validation_rule_id (nullable) is None
        # and model_fields_set contains the field
        if self.validation_rule_id is None and "validation_rule_id" in self.model_fields_set:
            _dict['validation_rule_id'] = None

        # set to None if metadata (nullable) is None
        # and model_fields_set contains the field
        if self.metadata is None and "metadata" in self.model_fields_set:
            _dict['metadata'] = None

        # set to None if categories (nullable) is None
        # and model_fields_set contains the field
        if self.categories is None and "categories" in self.model_fields_set:
            _dict['categories'] = None

        # set to None if banner (nullable) is None
        # and model_fields_set contains the field
        if self.banner is None and "banner" in self.model_fields_set:
            _dict['banner'] = None

        # set to None if name (nullable) is None
        # and model_fields_set contains the field
        if self.name is None and "name" in self.model_fields_set:
            _dict['name'] = None

        # set to None if campaign_name (nullable) is None
        # and model_fields_set contains the field
        if self.campaign_name is None and "campaign_name" in self.model_fields_set:
            _dict['campaign_name'] = None

        # set to None if campaign_id (nullable) is None
        # and model_fields_set contains the field
        if self.campaign_id is None and "campaign_id" in self.model_fields_set:
            _dict['campaign_id'] = None

        # set to None if redeemables (nullable) is None
        # and model_fields_set contains the field
        if self.redeemables is None and "redeemables" in self.model_fields_set:
            _dict['redeemables'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of QualificationsRedeemable from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "id": obj.get("id"),
            "object": obj.get("object"),
            "created_at": obj.get("created_at"),
            "result": RedeemableResult.from_dict(obj["result"]) if obj.get("result") is not None else None,
            "order": OrderCalculated.from_dict(obj["order"]) if obj.get("order") is not None else None,
            "validation_rule_id": obj.get("validation_rule_id"),
            "applicable_to": ApplicableToResultList.from_dict(obj["applicable_to"]) if obj.get("applicable_to") is not None else None,
            "inapplicable_to": InapplicableToResultList.from_dict(obj["inapplicable_to"]) if obj.get("inapplicable_to") is not None else None,
            "metadata": obj.get("metadata"),
            "categories": [Category.from_dict(_item) for _item in obj["categories"]] if obj.get("categories") is not None else None,
            "banner": obj.get("banner"),
            "name": obj.get("name"),
            "campaign_name": obj.get("campaign_name"),
            "campaign_id": obj.get("campaign_id"),
            "validation_rules_assignments": ValidationRulesAssignmentsList.from_dict(obj["validation_rules_assignments"]) if obj.get("validation_rules_assignments") is not None else None,
            "redeemables": [QualificationsRedeemableBase.from_dict(_item) for _item in obj["redeemables"]] if obj.get("redeemables") is not None else None
        })
        return _obj


