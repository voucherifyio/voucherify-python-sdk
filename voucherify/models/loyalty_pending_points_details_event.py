# coding: utf-8

"""
    Voucherify API

    Voucherify promotion engine REST API. Please see https://docs.voucherify.io/docs for more details.

    The version of the OpenAPI document: v2018-08-01
    Contact: support@voucherify.io
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from voucherify.models.event_source import EventSource
from typing import Optional, Set
from typing_extensions import Self

class LoyaltyPendingPointsDetailsEvent(BaseModel):
    """
    Details about the event that created pending points.
    """ # noqa: E501
    id: Optional[StrictStr] = Field(default=None, description="Unique event identifier, assigned by Voucherify.")
    type: Optional[StrictStr] = Field(default='customer.order.paid', description="Type of the event that triggered the creation of pending points.")
    group_id: Optional[StrictStr] = Field(default=None, description="Unique identifier of the request that triggered the event, assigned by Voucherify.")
    entity_id: Optional[StrictStr] = Field(default=None, description="Unique identifier of the entity that triggered the event, assigned by Voucherify. For pending points, it is the `customer_id` of the customer who paid for the order.")
    created_at: Optional[datetime] = Field(default=None, description="Timestamp representing the date and time when the event occurred. The value is shown in the ISO 8601 format.")
    category: Optional[StrictStr] = Field(default=None, description="Type of the event.")
    event_source: Optional[EventSource] = None
    __properties: ClassVar[List[str]] = ["id", "type", "group_id", "entity_id", "created_at", "category", "event_source"]

    @field_validator('type')
    def type_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['customer.order.paid']):
            raise ValueError("must be one of enum values ('customer.order.paid')")
        return value

    @field_validator('category')
    def category_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['ACTION', 'EFFECT']):
            raise ValueError("must be one of enum values ('ACTION', 'EFFECT')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of LoyaltyPendingPointsDetailsEvent from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of event_source
        if self.event_source:
            _dict['event_source'] = self.event_source.to_dict()
        # set to None if id (nullable) is None
        # and model_fields_set contains the field
        if self.id is None and "id" in self.model_fields_set:
            _dict['id'] = None

        # set to None if type (nullable) is None
        # and model_fields_set contains the field
        if self.type is None and "type" in self.model_fields_set:
            _dict['type'] = None

        # set to None if group_id (nullable) is None
        # and model_fields_set contains the field
        if self.group_id is None and "group_id" in self.model_fields_set:
            _dict['group_id'] = None

        # set to None if entity_id (nullable) is None
        # and model_fields_set contains the field
        if self.entity_id is None and "entity_id" in self.model_fields_set:
            _dict['entity_id'] = None

        # set to None if created_at (nullable) is None
        # and model_fields_set contains the field
        if self.created_at is None and "created_at" in self.model_fields_set:
            _dict['created_at'] = None

        # set to None if category (nullable) is None
        # and model_fields_set contains the field
        if self.category is None and "category" in self.model_fields_set:
            _dict['category'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of LoyaltyPendingPointsDetailsEvent from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "id": obj.get("id"),
            "type": obj.get("type") if obj.get("type") is not None else 'customer.order.paid',
            "group_id": obj.get("group_id"),
            "entity_id": obj.get("entity_id"),
            "created_at": obj.get("created_at"),
            "category": obj.get("category"),
            "event_source": EventSource.from_dict(obj["event_source"]) if obj.get("event_source") is not None else None
        })
        return _obj


