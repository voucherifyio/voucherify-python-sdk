# coding: utf-8

"""
    Voucherify API

    Voucherify promotion engine REST API. Please see https://docs.voucherify.io/docs for more details.

    The version of the OpenAPI document: v2018-08-01
    Contact: support@voucherify.io
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from voucherify.models.loyalty_tier_config import LoyaltyTierConfig
from voucherify.models.loyalty_tier_expiration import LoyaltyTierExpiration
from voucherify.models.loyalty_tier_points import LoyaltyTierPoints
from typing import Optional, Set
from typing_extensions import Self

class LoyaltyTier(BaseModel):
    """
    LoyaltyTier
    """ # noqa: E501
    name: Optional[StrictStr] = Field(default=None, description="Loyalty Tier name.")
    earning_rules: Optional[Dict[str, Any]] = Field(default=None, description="Contains a list of earning rule IDs and their points mapping for the given earning rule.")
    rewards: Optional[Dict[str, Any]] = Field(default=None, description="Contains a list of reward IDs and their points mapping for the given reward.")
    points: Optional[LoyaltyTierPoints] = None
    id: Optional[StrictStr] = Field(default=None, description="Unique loyalty tier ID.")
    campaign_id: Optional[StrictStr] = Field(default=None, description="Unique parent campaign ID.")
    metadata: Optional[Dict[str, Any]] = Field(default=None, description="The metadata object stores all custom attributes assigned to the loyalty tier. A set of key/value pairs that you can attach to a loyalty tier object. It can be useful for storing additional information about the loyalty tier in a structured format.")
    created_at: Optional[datetime] = Field(default=None, description="Timestamp representing the date and time when the loyalty tier was created. The value is shown in the ISO 8601 format.")
    updated_at: Optional[datetime] = Field(default=None, description="Timestamp representing the date and time when the loyalty tier was updated. The value is shown in the ISO 8601 format.")
    config: Optional[LoyaltyTierConfig] = None
    expiration: Optional[LoyaltyTierExpiration] = None
    object: Optional[StrictStr] = Field(default='loyalty_tier', description="The type of the object represented by JSON. This object stores information about the loyalty.")
    __properties: ClassVar[List[str]] = ["name", "earning_rules", "rewards", "points", "id", "campaign_id", "metadata", "created_at", "updated_at", "config", "expiration", "object"]

    @field_validator('object')
    def object_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['loyalty_tier']):
            raise ValueError("must be one of enum values ('loyalty_tier')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of LoyaltyTier from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of points
        if self.points:
            _dict['points'] = self.points.to_dict()
        # override the default output from pydantic by calling `to_dict()` of config
        if self.config:
            _dict['config'] = self.config.to_dict()
        # override the default output from pydantic by calling `to_dict()` of expiration
        if self.expiration:
            _dict['expiration'] = self.expiration.to_dict()
        # set to None if name (nullable) is None
        # and model_fields_set contains the field
        if self.name is None and "name" in self.model_fields_set:
            _dict['name'] = None

        # set to None if earning_rules (nullable) is None
        # and model_fields_set contains the field
        if self.earning_rules is None and "earning_rules" in self.model_fields_set:
            _dict['earning_rules'] = None

        # set to None if rewards (nullable) is None
        # and model_fields_set contains the field
        if self.rewards is None and "rewards" in self.model_fields_set:
            _dict['rewards'] = None

        # set to None if points (nullable) is None
        # and model_fields_set contains the field
        if self.points is None and "points" in self.model_fields_set:
            _dict['points'] = None

        # set to None if id (nullable) is None
        # and model_fields_set contains the field
        if self.id is None and "id" in self.model_fields_set:
            _dict['id'] = None

        # set to None if campaign_id (nullable) is None
        # and model_fields_set contains the field
        if self.campaign_id is None and "campaign_id" in self.model_fields_set:
            _dict['campaign_id'] = None

        # set to None if metadata (nullable) is None
        # and model_fields_set contains the field
        if self.metadata is None and "metadata" in self.model_fields_set:
            _dict['metadata'] = None

        # set to None if created_at (nullable) is None
        # and model_fields_set contains the field
        if self.created_at is None and "created_at" in self.model_fields_set:
            _dict['created_at'] = None

        # set to None if updated_at (nullable) is None
        # and model_fields_set contains the field
        if self.updated_at is None and "updated_at" in self.model_fields_set:
            _dict['updated_at'] = None

        # set to None if config (nullable) is None
        # and model_fields_set contains the field
        if self.config is None and "config" in self.model_fields_set:
            _dict['config'] = None

        # set to None if object (nullable) is None
        # and model_fields_set contains the field
        if self.object is None and "object" in self.model_fields_set:
            _dict['object'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of LoyaltyTier from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "name": obj.get("name"),
            "earning_rules": obj.get("earning_rules"),
            "rewards": obj.get("rewards"),
            "points": LoyaltyTierPoints.from_dict(obj["points"]) if obj.get("points") is not None else None,
            "id": obj.get("id"),
            "campaign_id": obj.get("campaign_id"),
            "metadata": obj.get("metadata"),
            "created_at": obj.get("created_at"),
            "updated_at": obj.get("updated_at"),
            "config": LoyaltyTierConfig.from_dict(obj["config"]) if obj.get("config") is not None else None,
            "expiration": LoyaltyTierExpiration.from_dict(obj["expiration"]) if obj.get("expiration") is not None else None,
            "object": obj.get("object") if obj.get("object") is not None else 'loyalty_tier'
        })
        return _obj


