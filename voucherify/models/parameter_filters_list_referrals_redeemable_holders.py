# coding: utf-8

"""
    Voucherify API

    Voucherify promotion engine REST API. Please see https://docs.voucherify.io/docs for more details.

    The version of the OpenAPI document: v2018-08-01
    Contact: support@voucherify.io
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict
from typing import Any, ClassVar, Dict, List, Optional
from voucherify.models.junction import Junction
from voucherify.models.parameter_filters_list_referrals_redeemable_holders_created_at import ParameterFiltersListReferralsRedeemableHoldersCreatedAt
from voucherify.models.parameter_filters_list_referrals_redeemable_holders_customer_id import ParameterFiltersListReferralsRedeemableHoldersCustomerId
from voucherify.models.parameter_filters_list_referrals_redeemable_holders_holder_role import ParameterFiltersListReferralsRedeemableHoldersHolderRole
from voucherify.models.parameter_filters_list_referrals_redeemable_holders_id import ParameterFiltersListReferralsRedeemableHoldersId
from typing import Optional, Set
from typing_extensions import Self

class ParameterFiltersListReferralsRedeemableHolders(BaseModel):
    """
    ParameterFiltersListReferralsRedeemableHolders
    """ # noqa: E501
    id: Optional[ParameterFiltersListReferralsRedeemableHoldersId] = None
    created_at: Optional[ParameterFiltersListReferralsRedeemableHoldersCreatedAt] = None
    holder_role: Optional[ParameterFiltersListReferralsRedeemableHoldersHolderRole] = None
    customer_id: Optional[ParameterFiltersListReferralsRedeemableHoldersCustomerId] = None
    junction: Optional[Junction] = None
    __properties: ClassVar[List[str]] = ["id", "created_at", "holder_role", "customer_id", "junction"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ParameterFiltersListReferralsRedeemableHolders from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of id
        if self.id:
            _dict['id'] = self.id.to_dict()
        # override the default output from pydantic by calling `to_dict()` of created_at
        if self.created_at:
            _dict['created_at'] = self.created_at.to_dict()
        # override the default output from pydantic by calling `to_dict()` of holder_role
        if self.holder_role:
            _dict['holder_role'] = self.holder_role.to_dict()
        # override the default output from pydantic by calling `to_dict()` of customer_id
        if self.customer_id:
            _dict['customer_id'] = self.customer_id.to_dict()
        # set to None if id (nullable) is None
        # and model_fields_set contains the field
        if self.id is None and "id" in self.model_fields_set:
            _dict['id'] = None

        # set to None if created_at (nullable) is None
        # and model_fields_set contains the field
        if self.created_at is None and "created_at" in self.model_fields_set:
            _dict['created_at'] = None

        # set to None if holder_role (nullable) is None
        # and model_fields_set contains the field
        if self.holder_role is None and "holder_role" in self.model_fields_set:
            _dict['holder_role'] = None

        # set to None if customer_id (nullable) is None
        # and model_fields_set contains the field
        if self.customer_id is None and "customer_id" in self.model_fields_set:
            _dict['customer_id'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ParameterFiltersListReferralsRedeemableHolders from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "id": ParameterFiltersListReferralsRedeemableHoldersId.from_dict(obj["id"]) if obj.get("id") is not None else None,
            "created_at": ParameterFiltersListReferralsRedeemableHoldersCreatedAt.from_dict(obj["created_at"]) if obj.get("created_at") is not None else None,
            "holder_role": ParameterFiltersListReferralsRedeemableHoldersHolderRole.from_dict(obj["holder_role"]) if obj.get("holder_role") is not None else None,
            "customer_id": ParameterFiltersListReferralsRedeemableHoldersCustomerId.from_dict(obj["customer_id"]) if obj.get("customer_id") is not None else None,
            "junction": obj.get("junction")
        })
        return _obj


