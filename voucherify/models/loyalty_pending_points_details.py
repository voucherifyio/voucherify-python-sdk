# coding: utf-8

"""
    Voucherify API

    Voucherify promotion engine REST API. Please see https://docs.voucherify.io/docs for more details.

    The version of the OpenAPI document: v2018-08-01
    Contact: support@voucherify.io
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict
from typing import Any, ClassVar, Dict, List, Optional
from voucherify.models.loyalty_pending_points_details_earning_rule import LoyaltyPendingPointsDetailsEarningRule
from voucherify.models.loyalty_pending_points_details_event import LoyaltyPendingPointsDetailsEvent
from voucherify.models.loyalty_pending_points_details_holder_loyalty_tier import LoyaltyPendingPointsDetailsHolderLoyaltyTier
from voucherify.models.loyalty_pending_points_details_loyalty_tier import LoyaltyPendingPointsDetailsLoyaltyTier
from voucherify.models.loyalty_pending_points_details_order import LoyaltyPendingPointsDetailsOrder
from typing import Optional, Set
from typing_extensions import Self

class LoyaltyPendingPointsDetails(BaseModel):
    """
    Details about how the pending points were earned.
    """ # noqa: E501
    loyalty_tier: Optional[LoyaltyPendingPointsDetailsLoyaltyTier] = None
    holder_loyalty_tier: Optional[LoyaltyPendingPointsDetailsHolderLoyaltyTier] = None
    event: Optional[LoyaltyPendingPointsDetailsEvent] = None
    earning_rule: Optional[LoyaltyPendingPointsDetailsEarningRule] = None
    order: Optional[LoyaltyPendingPointsDetailsOrder] = None
    __properties: ClassVar[List[str]] = ["loyalty_tier", "holder_loyalty_tier", "event", "earning_rule", "order"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of LoyaltyPendingPointsDetails from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of loyalty_tier
        if self.loyalty_tier:
            _dict['loyalty_tier'] = self.loyalty_tier.to_dict()
        # override the default output from pydantic by calling `to_dict()` of holder_loyalty_tier
        if self.holder_loyalty_tier:
            _dict['holder_loyalty_tier'] = self.holder_loyalty_tier.to_dict()
        # override the default output from pydantic by calling `to_dict()` of event
        if self.event:
            _dict['event'] = self.event.to_dict()
        # override the default output from pydantic by calling `to_dict()` of earning_rule
        if self.earning_rule:
            _dict['earning_rule'] = self.earning_rule.to_dict()
        # override the default output from pydantic by calling `to_dict()` of order
        if self.order:
            _dict['order'] = self.order.to_dict()
        # set to None if loyalty_tier (nullable) is None
        # and model_fields_set contains the field
        if self.loyalty_tier is None and "loyalty_tier" in self.model_fields_set:
            _dict['loyalty_tier'] = None

        # set to None if holder_loyalty_tier (nullable) is None
        # and model_fields_set contains the field
        if self.holder_loyalty_tier is None and "holder_loyalty_tier" in self.model_fields_set:
            _dict['holder_loyalty_tier'] = None

        # set to None if event (nullable) is None
        # and model_fields_set contains the field
        if self.event is None and "event" in self.model_fields_set:
            _dict['event'] = None

        # set to None if earning_rule (nullable) is None
        # and model_fields_set contains the field
        if self.earning_rule is None and "earning_rule" in self.model_fields_set:
            _dict['earning_rule'] = None

        # set to None if order (nullable) is None
        # and model_fields_set contains the field
        if self.order is None and "order" in self.model_fields_set:
            _dict['order'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of LoyaltyPendingPointsDetails from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "loyalty_tier": LoyaltyPendingPointsDetailsLoyaltyTier.from_dict(obj["loyalty_tier"]) if obj.get("loyalty_tier") is not None else None,
            "holder_loyalty_tier": LoyaltyPendingPointsDetailsHolderLoyaltyTier.from_dict(obj["holder_loyalty_tier"]) if obj.get("holder_loyalty_tier") is not None else None,
            "event": LoyaltyPendingPointsDetailsEvent.from_dict(obj["event"]) if obj.get("event") is not None else None,
            "earning_rule": LoyaltyPendingPointsDetailsEarningRule.from_dict(obj["earning_rule"]) if obj.get("earning_rule") is not None else None,
            "order": LoyaltyPendingPointsDetailsOrder.from_dict(obj["order"]) if obj.get("order") is not None else None
        })
        return _obj


