# coding: utf-8

"""
    Voucherify API

    Voucherify promotion engine REST API. Please see https://docs.voucherify.io/docs for more details.

    The version of the OpenAPI document: v2018-08-01
    Contact: support@voucherify.io
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from voucherify.models.customer import Customer
from voucherify.models.order import Order
from voucherify.models.session import Session
from voucherify.models.validations_validate_request_body_options import ValidationsValidateRequestBodyOptions
from voucherify.models.validations_validate_request_body_redeemables_item import ValidationsValidateRequestBodyRedeemablesItem
from typing import Optional, Set
from typing_extensions import Self

class ValidationsValidateRequestBody(BaseModel):
    """
    Response body schema for **POST** `v1/validations`.
    """ # noqa: E501
    options: Optional[ValidationsValidateRequestBodyOptions] = None
    redeemables: Optional[List[ValidationsValidateRequestBodyRedeemablesItem]] = None
    order: Optional[Order] = None
    customer: Optional[Customer] = None
    session: Optional[Session] = None
    tracking_id: Optional[StrictStr] = Field(default=None, description="Is correspondent to Customer's source_id")
    metadata: Optional[Dict[str, Any]] = Field(default=None, description="A set of key/value pairs that you can attach to a redemption object. It can be useful for storing additional information about the redemption in a structured format.")
    __properties: ClassVar[List[str]] = ["options", "redeemables", "order", "customer", "session", "tracking_id", "metadata"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ValidationsValidateRequestBody from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of options
        if self.options:
            _dict['options'] = self.options.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in redeemables (list)
        _items = []
        if self.redeemables:
            for _item_redeemables in self.redeemables:
                if _item_redeemables:
                    _items.append(_item_redeemables.to_dict())
            _dict['redeemables'] = _items
        # override the default output from pydantic by calling `to_dict()` of order
        if self.order:
            _dict['order'] = self.order.to_dict()
        # override the default output from pydantic by calling `to_dict()` of customer
        if self.customer:
            _dict['customer'] = self.customer.to_dict()
        # override the default output from pydantic by calling `to_dict()` of session
        if self.session:
            _dict['session'] = self.session.to_dict()
        # set to None if options (nullable) is None
        # and model_fields_set contains the field
        if self.options is None and "options" in self.model_fields_set:
            _dict['options'] = None

        # set to None if redeemables (nullable) is None
        # and model_fields_set contains the field
        if self.redeemables is None and "redeemables" in self.model_fields_set:
            _dict['redeemables'] = None

        # set to None if tracking_id (nullable) is None
        # and model_fields_set contains the field
        if self.tracking_id is None and "tracking_id" in self.model_fields_set:
            _dict['tracking_id'] = None

        # set to None if metadata (nullable) is None
        # and model_fields_set contains the field
        if self.metadata is None and "metadata" in self.model_fields_set:
            _dict['metadata'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ValidationsValidateRequestBody from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "options": ValidationsValidateRequestBodyOptions.from_dict(obj["options"]) if obj.get("options") is not None else None,
            "redeemables": [ValidationsValidateRequestBodyRedeemablesItem.from_dict(_item) for _item in obj["redeemables"]] if obj.get("redeemables") is not None else None,
            "order": Order.from_dict(obj["order"]) if obj.get("order") is not None else None,
            "customer": Customer.from_dict(obj["customer"]) if obj.get("customer") is not None else None,
            "session": Session.from_dict(obj["session"]) if obj.get("session") is not None else None,
            "tracking_id": obj.get("tracking_id"),
            "metadata": obj.get("metadata")
        })
        return _obj


