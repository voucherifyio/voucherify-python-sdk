# coding: utf-8

"""
    Voucherify API

    Voucherify promotion engine REST API. Please see https://docs.voucherify.io/docs for more details.

    The version of the OpenAPI document: v2018-08-01
    Contact: support@voucherify.io
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class LoyaltyTiersExpirationAllExpirationDateRounding(BaseModel):
    """
    Defines the rounding mechanism for tier expiration.
    """ # noqa: E501
    type: Optional[StrictStr] = Field(default=None, description="This mechanism describes a custom rounding for the expiration date.")
    strategy: Optional[StrictStr] = Field(default=None, description="This mechanism describes a rounding strategy for the expiration date.")
    unit: Optional[StrictStr] = Field(default='MONTH', description="Defines the type of unit of time in which the rounding period is counted.")
    value: Optional[StrictInt] = Field(default=None, description="Value for the unit of time that the rounding applies to. Units for this parameter are defined by the `rounding.unit` parameter.     - `0`: January - `1`: February - `2`: March - `3`: April - `4`: May - `5`: June - `6`: July - `7`: August - `8`: September - `9`: October - `10`: November - `11`: December")
    __properties: ClassVar[List[str]] = ["type", "strategy", "unit", "value"]

    @field_validator('type')
    def type_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['MONTH', 'QUARTER', 'HALF_YEAR', 'YEAR', 'CUSTOM']):
            raise ValueError("must be one of enum values ('MONTH', 'QUARTER', 'HALF_YEAR', 'YEAR', 'CUSTOM')")
        return value

    @field_validator('strategy')
    def strategy_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['START', 'END']):
            raise ValueError("must be one of enum values ('START', 'END')")
        return value

    @field_validator('unit')
    def unit_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['MONTH']):
            raise ValueError("must be one of enum values ('MONTH')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of LoyaltyTiersExpirationAllExpirationDateRounding from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # set to None if type (nullable) is None
        # and model_fields_set contains the field
        if self.type is None and "type" in self.model_fields_set:
            _dict['type'] = None

        # set to None if strategy (nullable) is None
        # and model_fields_set contains the field
        if self.strategy is None and "strategy" in self.model_fields_set:
            _dict['strategy'] = None

        # set to None if unit (nullable) is None
        # and model_fields_set contains the field
        if self.unit is None and "unit" in self.model_fields_set:
            _dict['unit'] = None

        # set to None if value (nullable) is None
        # and model_fields_set contains the field
        if self.value is None and "value" in self.model_fields_set:
            _dict['value'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of LoyaltyTiersExpirationAllExpirationDateRounding from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "type": obj.get("type"),
            "strategy": obj.get("strategy"),
            "unit": obj.get("unit") if obj.get("unit") is not None else 'MONTH',
            "value": obj.get("value")
        })
        return _obj


