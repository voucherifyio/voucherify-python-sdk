# coding: utf-8

"""
    Voucherify API

    Voucherify promotion engine REST API. Please see https://docs.voucherify.io/docs for more details.

    The version of the OpenAPI document: v2018-08-01
    Contact: support@voucherify.io
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class ParameterFiltersListCustomerRedeemablesCreatedAtConditions(BaseModel):
    """
    Data filters used to narrow down the data records to be returned in the result.
    """ # noqa: E501
    after: Optional[datetime] = Field(default=None, description="Value is after this date. The value for this parameter is shown in the ISO 8601 format.", alias="$after")
    before: Optional[datetime] = Field(default=None, description="Value is before this date. The value for this parameter is shown in the ISO 8601 format.", alias="$before")
    has_value: Optional[StrictStr] = Field(default=None, description="Value is NOT null. The value for this parameter is an empty string.", alias="$has_value")
    is_unknown: Optional[StrictStr] = Field(default=None, description="Value is null. The value for this parameter is an empty string.", alias="$is_unknown")
    more_than: Optional[StrictInt] = Field(default=None, description="Value is more days ago before the current date and time, e.g. more than `10` days ago.")
    less_than: Optional[StrictInt] = Field(default=None, description="Value is less days before the current date and time, e.g. less than `10` days ago.")
    __properties: ClassVar[List[str]] = ["$after", "$before", "$has_value", "$is_unknown", "more_than", "less_than"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ParameterFiltersListCustomerRedeemablesCreatedAtConditions from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # set to None if after (nullable) is None
        # and model_fields_set contains the field
        if self.after is None and "after" in self.model_fields_set:
            _dict['$after'] = None

        # set to None if before (nullable) is None
        # and model_fields_set contains the field
        if self.before is None and "before" in self.model_fields_set:
            _dict['$before'] = None

        # set to None if has_value (nullable) is None
        # and model_fields_set contains the field
        if self.has_value is None and "has_value" in self.model_fields_set:
            _dict['$has_value'] = None

        # set to None if is_unknown (nullable) is None
        # and model_fields_set contains the field
        if self.is_unknown is None and "is_unknown" in self.model_fields_set:
            _dict['$is_unknown'] = None

        # set to None if more_than (nullable) is None
        # and model_fields_set contains the field
        if self.more_than is None and "more_than" in self.model_fields_set:
            _dict['more_than'] = None

        # set to None if less_than (nullable) is None
        # and model_fields_set contains the field
        if self.less_than is None and "less_than" in self.model_fields_set:
            _dict['less_than'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ParameterFiltersListCustomerRedeemablesCreatedAtConditions from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "$after": obj.get("$after"),
            "$before": obj.get("$before"),
            "$has_value": obj.get("$has_value"),
            "$is_unknown": obj.get("$is_unknown"),
            "more_than": obj.get("more_than"),
            "less_than": obj.get("less_than")
        })
        return _obj


