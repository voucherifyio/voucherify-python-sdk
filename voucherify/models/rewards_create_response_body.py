# coding: utf-8

"""
    Voucherify API

    Voucherify promotion engine REST API. Please see https://docs.voucherify.io/docs for more details.

    The version of the OpenAPI document: v2018-08-01
    Contact: support@voucherify.io
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from voucherify.models.reward_type import RewardType
from voucherify.models.rewards_create_response_body_attributes import RewardsCreateResponseBodyAttributes
from typing import Optional, Set
from typing_extensions import Self

class RewardsCreateResponseBody(BaseModel):
    """
    Response body schema for **POST** `v1/rewards`.
    """ # noqa: E501
    id: Optional[StrictStr] = Field(default=None, description="Unique reward ID, assigned by Voucherify.")
    name: Optional[StrictStr] = Field(default=None, description="Reward name.")
    stock: Optional[StrictInt] = Field(default=None, description="Configurable for **material rewards**. The number of units of the product that you want to share as reward.")
    redeemed: Optional[StrictInt] = Field(default=None, description="Defines the number of already invoked (successful) reward redemptions. ")
    attributes: Optional[RewardsCreateResponseBodyAttributes] = None
    metadata: Optional[Dict[str, Any]] = Field(default=None, description="The metadata object stores all custom attributes assigned to the reward. A set of key/value pairs that you can attach to a reward object. It can be useful for storing additional information about the reward in a structured format.")
    type: Optional[StrictStr] = Field(default=None, description="Reward type.")
    parameters: Optional[RewardType] = None
    created_at: Optional[datetime] = Field(default=None, description="Timestamp representing the date and time when the reward was created. The value is shown in the ISO 8601 format.")
    updated_at: Optional[datetime] = Field(default=None, description="Timestamp representing the date and time when the reward was updated. The value is shown in the ISO 8601 format.")
    object: StrictStr = Field(description="The type of the object represented by the JSON. This object stores information about the reward.")
    __properties: ClassVar[List[str]] = ["id", "name", "stock", "redeemed", "attributes", "metadata", "type", "parameters", "created_at", "updated_at", "object"]

    @field_validator('type')
    def type_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['CAMPAIGN', 'COIN', 'MATERIAL']):
            raise ValueError("must be one of enum values ('CAMPAIGN', 'COIN', 'MATERIAL')")
        return value

    @field_validator('object')
    def object_validate_enum(cls, value):
        """Validates the enum"""
        if value not in set(['reward']):
            raise ValueError("must be one of enum values ('reward')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of RewardsCreateResponseBody from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of attributes
        if self.attributes:
            _dict['attributes'] = self.attributes.to_dict()
        # override the default output from pydantic by calling `to_dict()` of parameters
        if self.parameters:
            _dict['parameters'] = self.parameters.to_dict()
        # set to None if id (nullable) is None
        # and model_fields_set contains the field
        if self.id is None and "id" in self.model_fields_set:
            _dict['id'] = None

        # set to None if name (nullable) is None
        # and model_fields_set contains the field
        if self.name is None and "name" in self.model_fields_set:
            _dict['name'] = None

        # set to None if stock (nullable) is None
        # and model_fields_set contains the field
        if self.stock is None and "stock" in self.model_fields_set:
            _dict['stock'] = None

        # set to None if redeemed (nullable) is None
        # and model_fields_set contains the field
        if self.redeemed is None and "redeemed" in self.model_fields_set:
            _dict['redeemed'] = None

        # set to None if attributes (nullable) is None
        # and model_fields_set contains the field
        if self.attributes is None and "attributes" in self.model_fields_set:
            _dict['attributes'] = None

        # set to None if metadata (nullable) is None
        # and model_fields_set contains the field
        if self.metadata is None and "metadata" in self.model_fields_set:
            _dict['metadata'] = None

        # set to None if type (nullable) is None
        # and model_fields_set contains the field
        if self.type is None and "type" in self.model_fields_set:
            _dict['type'] = None

        # set to None if created_at (nullable) is None
        # and model_fields_set contains the field
        if self.created_at is None and "created_at" in self.model_fields_set:
            _dict['created_at'] = None

        # set to None if updated_at (nullable) is None
        # and model_fields_set contains the field
        if self.updated_at is None and "updated_at" in self.model_fields_set:
            _dict['updated_at'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of RewardsCreateResponseBody from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "id": obj.get("id"),
            "name": obj.get("name"),
            "stock": obj.get("stock"),
            "redeemed": obj.get("redeemed"),
            "attributes": RewardsCreateResponseBodyAttributes.from_dict(obj["attributes"]) if obj.get("attributes") is not None else None,
            "metadata": obj.get("metadata"),
            "type": obj.get("type"),
            "parameters": RewardType.from_dict(obj["parameters"]) if obj.get("parameters") is not None else None,
            "created_at": obj.get("created_at"),
            "updated_at": obj.get("updated_at"),
            "object": obj.get("object") if obj.get("object") is not None else 'reward'
        })
        return _obj


